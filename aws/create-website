#!/usr/bin/env python3

import os
import sys
import json
import argparse
import dictlib
import time
import oz

def log(msg, *args):
    print(str(int(time.time())) + " " + msg.format(*args))

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("profile")
    parser.add_argument("domain")
    args = parser.parse_args()

    ozw = oz.StaticWebsite(domain=args.domain, profile=args.profile, region='us-west-2')
    domain = args.domain
    #acctid = ozw.get_account_id()

    # create log bucket, not public
    # create domain bucket, as public
    # lame - AWS requires certs for cloudfront to be in us-east-1
    cert_arn = ozw.acm_ssl_cert(domain, region='us-east-1')
    log("ssl cert={}".format(cert_arn))
    # setup lifecycle
    log_bucket = ozw.create_bucket(domain + "-logs", cfg=dict(ACL='private'))
    web_bucket = ozw.create_bucket(domain)
    ozw.s3_bucket_website(domain)
    ozw.create_iam_policy("s3-admin-" + domain, {
        "Statement": [
            {
                "Action": [
                    "s3:ListAllMyBuckets"
                ],
                "Effect": "Allow",
                "Resource": [
                    "arn:aws:s3:::*"
                ]
            },
            {
                "Action": [
                    "s3:ListBucket",
                    "s3:PutObject",
                    "s3:PutObjectAcl"
                ],
                "Effect": "Allow",
                "Resource": [
                    "arn:aws:s3:::" + domain,
                    "arn:aws:s3:::" + domain + "/*"
                ]
            }
        ],
        "Version": "2012-10-17"
    })

    ozw.create_s3_policy(domain, {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::" + domain + "/*"
            }
        ]
    })

    # s3push automation policy iam account?

    # create cert first?
    ozw.create_cdn(web_bucket, log_bucket, cert_arn)

    # s3cmd sync

if __name__ == '__main__':
    main()
